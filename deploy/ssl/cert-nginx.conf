upstream slm-api {
    server $SERVICE_SLM;
}

server {
    listen 80 default;
    server_name $DOMAIN;
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name $DOMAIN;
    ssl_certificate /usr/share/nginx/certificates/fullchain.pem;
    ssl_certificate_key /usr/share/nginx/certificates/privkey.pem;
    include /etc/ssl-options/options.conf;
    ssl_dhparam /etc/ssl-options/dhparams.pem;
    client_max_body_size 100M;
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }

    location /api/slm/ {
        # Proxy to SLM API container
        # Nginx doesn't support nested if statements, concatenate compound
        # conditions on the $cors variable and process later
        set $cors '';

        # Enable CORS for allowed (sub)domains
        if ($http_origin ~* ($CORS_ORIGINS)) {
            set $cors 'on';
        }

        if ($request_method = OPTIONS) {
            set $cors "${cors}-pre";
        }

        # Respond directly to CORS preflight requests
        if ($cors = 'on-pre') {
            add_header Content-Length 0;
            add_header Content-Type 'text/plain';
            add_header Access-Control-Allow-Origin "$http_origin";
            add_header Access-Control-Allow-Methods "$CORS_METHODS";
            add_header Access-Control-Allow-Headers "$CORS_HEADERS";
            return 204;
        }

        # Proxy to upstream SLM module
        rewrite ^/api/slm(.*) /$1 break;
        proxy_pass http://slm-api;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-Path $request_uri;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache cache;
        proxy_cache_bypass $cookie_auth_tkt;
        proxy_no_cache $cookie_auth_tkt;
        proxy_cache_valid 30m;
        proxy_cache_key $host$scheme$proxy_host$request_uri;
    }

    location / {
        # Proxy everything to the frontend
        proxy_pass http://$SERVICE_UI;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache cache;
        proxy_cache_bypass $cookie_auth_tkt;
        proxy_no_cache $cookie_auth_tkt;
        proxy_cache_valid 30m;
        proxy_cache_key $host$scheme$proxy_host$request_uri;
        proxy_intercept_errors on;
        recursive_error_pages on;
        error_page 404 = @vueproxy;
    }

    location @vueproxy {
        # Vue3 SPAs need all non-root URLs to be sent to /index.html
        rewrite ^/(.*)$ /index.html?$1 break;
        proxy_pass http://$SERVICE_UI;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

server {
    listen 8080 ssl;
    server_name $DOMAIN;
    ssl_certificate /usr/share/nginx/certificates/fullchain.pem;
    ssl_certificate_key /usr/share/nginx/certificates/privkey.pem;
    include /etc/ssl-options/options.conf;
    ssl_dhparam /etc/ssl-options/dhparams.pem;
    client_max_body_size 100M;
    location / {
        # Proxy to Grafana container
        proxy_pass $GRAFANA_URL;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_cache cache;
        proxy_cache_bypass $cookie_auth_tkt;
        proxy_no_cache $cookie_auth_tkt;
        proxy_cache_valid 30m;
        proxy_cache_key $host$scheme$proxy_host$request_uri;
    }
}
