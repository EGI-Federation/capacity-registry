---
version: '3.9'

networks:
  default:
    name: egi
    driver: bridge

volumes:
  certificates:
  logs:
  database:

services:
  # ************************
  # IMS Tools components
  # ************************
  # SSL terminator
  ssl:
    container_name: ims-ssl
    image: egi/ims-ssl:latest
    build:
      context: ssl/
      args:
        - SERVICE_DOMAIN=${SERVICE_DOMAIN}
        - SERVICE_EMAIL=${SERVICE_EMAIL}
        - SERVICE_UI=ims-ui:8080
        - SERVICE_SLM=ims-slm-api:8081
        - GRAFANA_URL=http://grafana:3000
        - TELEMETRY_URL=${OTEL_COLLECTOR_ADDR}
        - CORS_ORIGINS=${CORS_ORIGINS:-.*}
        - CORS_HEADERS=${CORS_HEADERS:-Origin,Content-Type,Accept}
        - CORS_METHODS=${CORS_METHODS:-GET,POST,PUT,PATCH,DELETE,OPTIONS}
        - SSL_CERT_ORG=${SSL_CERT_ORG}
        - SSL_CERT_OPTIONS=${SSL_CERT_OPTIONS:-}
        - SSL_CERT_RENEW_INTERVAL=${SSL_CERT_RENEW_INTERVAL:-12h}
        - LETSENCRYPT_DIR=${LETSENCRYPT_DIR:-/etc/letsencrypt}
        - LETSENCRYPT_DRYRUN=${LETSENCRYPT_DRYRUN:- }
    links:
      - ims-ui
      - ims-slm-api
      - grafana
    volumes:
      - certificates:${LETSENCRYPT_DIR:-/etc/letsencrypt}
    healthcheck:
      test: ['CMD', '/opt/status.sh']
      start_period: 5s
      interval: 1m
      timeout: 5s
    restart: unless-stopped
    ports:
      - "80:80"
      - "${SERVICE_PORT}:443"
      - "${TELEMETRY_PORT}:8080"

  # Frontend
  ims-ui:
    container_name: ims-ui
    image: egi/ims-ui:latest
    build:
      context: ../frontend/
    environment:
      - EGI_CHECKIN_SERVER=${EGI_CHECKIN_SERVER}
      - EGI_VO=${EGI_VO}
      - EGI_VO_ENROLL_URL=${EGI_VO_ENROLL_URL}
      - LOCALE=${EGI_IMS_LOCALE:-en}
      - FALLBACK_LOCALE=${EGI_IMS_FALLBACK_LOCALE:-it}
      - TRACE_ROLES=${EGI_IMS_TRACE_ROLES:-false}
      - SLM_API=http://ims-slm-api:8081
    restart: unless-stopped
    ports:
      - "9080:8080"
    depends_on:
      - ims-slm-api

  # SLM API
  ims-slm-api:
    container_name: slm-api
    image: egi/ims-slm-api:latest
    build:
      context: ../backend/service-level-management/src/main/docker
    environment:
      - QUARKUS_PROFILE=${QUARKUS_PROFILE:-prod}
      - EGI_IMS_VO=${EGI_VO}
      - EGI_CHECKIN_PASSWORD=${EGI_CHECKIN_PASSWORD}
      - QUARKUS_OIDC_AUTH_SERVER_URL=${EGI_CHECKIN_SERVER}/auth/realms/egi
      - QUARKUS_DATASOURCE_REACTIVE_URL=postgresql://ims-db:5432/ims
      - QUARKUS_DATASOURCE_USERNAME=${EGI_IMS_DB_USER:-ims}
      - QUARKUS_DATASOURCE_PASSWORD=${EGI_IMS_DB_PASSWORD}
      - QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
      - QUARKUS_OPENTELEMETRY_TRACER_RESOURCE_ATTRIBUTES=${OTEL_RESOURCE_ATTRIBUTES},service.name=data-transfer
      - QUARKUS_HTTP_CORS_ORIGINS=/${CORS_ORIGINS:-.*}/
      - QUARKUS_HTTP_CORS_HEADERS=${CORS_HEADERS:-Origin,Content-Type,Accept}
      - QUARKUS_HTTP_CORS_METHODS=${CORS_METHODS:-GET,POST,PUT,DELETE,OPTIONS}
      - QUARKUS_SMALLRYE_OPENAPI_SERVERS=https://${SERVICE_DOMAIN}/api/slm
      - QUARKUS_LOG_FILE_PATH=/deployments/logs/slm-api.json
    volumes:
      - logs:/deployments/logs:rw
    restart: unless-stopped
    ports:
      - "9081:8081"
    links:
      - otelcol
    depends_on:
      ims-db:
          condition: service_healthy

  # ************************
  # Backend components
  # ************************
  ims-db:
    image: postgres:16-alpine
    container_name: ims-db
    environment:
      - POSTGRES_USER=${EGI_IMS_DB_USER}
      - POSTGRES_PASSWORD=${EGI_IMS_DB_PASSWORD}
      - POSTGRES_DB=ims
    volumes:
      - database:/var/lib/postgresql/data
      - ./postgres:/docker-entrypoint-initdb.d/
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${EGI_IMS_DB_USER}", "-d", "${EGI_IMS_DB_PASSWORD}" ]
    ports:
      - "5432:5432"

  # ************************
  # Telemetry components
  # ************************
  # Jaeger (traces)
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    command:
      - "--memory.max-traces"
      - "10000"
      - "--query.base-path"
      - "/jaeger/ui"
      - "--prometheus.server-url"
      - "http://prometheus:9090"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - METRICS_STORAGE_TYPE=prometheus
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${JAEGER_SERVICE_PORT}:16686" # Jaeger UI
      - "${JAEGER_COLLECTOR_PORT}:4317"

  # Loki (logs)
  loki:
    image: grafana/loki:2.4.1
    container_name: loki
    volumes:
      - ./loki/loki.yaml:/etc/loki/local-config.yaml
    deploy:
      resources:
        limits:
          memory: 250M
    restart: unless-stopped
    ports:
      - "${LOKI_COLLECTOR_PORT}:3100"

  # Prometheus (metrics)
  prometheus:
    image: quay.io/prometheus/prometheus:v2.34.0
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
    volumes:
      - ./prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:9090"

  # Grafana (dashboard)
  grafana:
    image: grafana/grafana:9.1.0
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 75M
    volumes:
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "3000:3000"

  # OpenTelemetry collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: ["--config=/etc/otelcol-config.yml"]
    volumes:
      - ./otelcollector/otelcol-config.yml:/etc/otelcol-config.yml
      - logs:/usr/logs/egi-ims:ro
    ports:
      - "${OTEL_COLLECTOR_PORT}:4317"
      - "9464:9464"   # Prometheus exporter
      - "8888:8888"   # Metrics endpoint
      - "13133:13133" # Health check
    depends_on:
      - jaeger
